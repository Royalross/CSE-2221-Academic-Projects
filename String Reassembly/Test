import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

public class StringReassemblyTest {
    @Test
    public void testcombination0() {
        String str1 = "";
        String str2 = "";
        String result = StringReassembly.combination(str1, str2, 0);
        assertTrue(result.isEmpty());

    }

    @Test
    public void testcombination1() {
        String str1 = "I am ";
        String str2 = "Batman";
        String str3 = "I am Batman";
        String Result = StringReassembly.combination(str1, str2, 0);
        assertEquals("I am Batman", Result);
    }

    @Test
    public void testaddToSetAvoidingSubstrings() {
        String str1 = "I am Batman";
        String str2 = "I am vengance";
        Set<String> test = new Set1L<String>();
        test.add(str1);
        test.add(str2);
        String str3 = "I am";
        StringReassembly.addToSetAvoidingSubstrings(test, str3);
        assertTrue(test.size() == 2);
        assertTrue(test.contains(str1));
        assertTrue(test.contains(str2));

    }

    @Test
    public void testaddToSetAvoidingSubstringsNotContained2() {
        String str1 = "I am trying";
        String str2 = "trying";
        Set<String> test = new Set1L<String>();
        test.add(str1);
        test.add(str2);
        String str3 = "trying";
        StringReassembly.addToSetAvoidingSubstrings(test, str3);

        assertTrue(test.contains(str3));
        assertTrue(test.size() == 3);
        assertTrue(test.contains(str1));
        assertTrue(test.contains(str2));

    }

    @Test
    public void testprintWithLineSeparators0() {
        String text = "I~am~Batman";
        String answer = "I" + "\n" + "am" + "\n" + "Batman";
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        StringReassembly.printWithLineSeparators(text, out);
        assertTrue(answer.equals(text.replaceAll("~", answer)));
    }

}
