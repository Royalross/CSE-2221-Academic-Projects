import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.sequence.Sequence;
import components.sequence.Sequence1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Put a short phrase describing the program here.
 *
 * @author Put your name here
 *
 */
public final class Glossary {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private Glossary() {
    }

    /**
     * Generate the page that pop up after you click the term
     *
     * @param word
     *            The term that is suppose to show up
     * @param out
     *            output stream
     * @updates out
     * @param mapedTerms
     *            The term and def mapped in a map
     * @param outputFile
     *            output file stream
     *
     */
    private static void TermsandDefPage(String word, SimpleWriter out,
            Map<String, String> mapedTerms, String outputFile) {
        int i = 0;
        String[] words = new String[mapedTerms.size()];
        for (Map.Pair<String, String> pair : mapedTerms) {
            words[i] = pair.key();
            i++;
        }
        String wordHtmlPage = outputFile + "/" + word + ".html";
        SimpleWriter htmlPage = new SimpleWriter1L(wordHtmlPage);

        htmlPage.println("<html>");
        htmlPage.println("<head>");
        htmlPage.println("<title>" + word + "</title>");
        htmlPage.println("</head>");
        htmlPage.println("<body>");
        htmlPage.println("<h2><b><i><font color=\"red\">" + word
                + "</font></i></b></h2>");
        String def = mapedTerms.value(word);
        for (int y = 0; y < words.length; y++) {
            // Moreover, clicking on any term in the glossary that
            // happens to appear in a definition shall take you to the page
            //for that term and its associated definition.
            if (def.contains(words[y])) {
                def = def.replace(words[y], "<a href=\"" + words[y] + ".html\">"
                        + words[y] + "</a>");
            }
        }
        htmlPage.print(def);
        htmlPage.println("<hr/>");
        htmlPage.println("<p>Return to <a href=\"index.html\">index</a>,<p>");
        htmlPage.println("</body>");
        htmlPage.println("</html>");

        htmlPage.close();
    }

    /**
     * @param in
     *            source of strings
     * @param mapped
     *            The map of Terms and Def
     * @updates mapped
     * @param terms
     *            The key of the map
     *
     *
     *
     */
    private static void TermandDef(SimpleReader in, Map<String, String> mapped,
            Queue<String> terms) {
        // Thanks to the TA that helped but he could have told me that i was just
        // missing a line
        String nextLine = "";
        String def = "";
        while (!in.atEOS()) {
            String term = in.nextLine();
            terms.enqueue(term);
            nextLine = "Just Here";
            def = "";
            while (!nextLine.equals("")) {
                nextLine = in.nextLine();
                def = def.concat(nextLine);
            }
            mapped.add(term, def);
        }
    }

    /**
     * Alphabetizes the given terms in a queue.
     *
     * @param terms
     *            the given terms
     * @replaces term
     */

    private static void Alphabeticalorder(Queue<String> terms) {
        terms.sort(new Comparator<String>() {
            @Override
            public int compare(String x, String y) {
                return x.compareToIgnoreCase(y);
            }
        });

    }

    /**
     * The home screen for the glossary
     *
     * @param x
     *            store all the terms
     * @param mapTerms
     *            Have the term and def mapped
     * @param outputFile
     *            The key of the map in mapTerms
     */
    private static void outputIndex(SimpleWriter file, Sequence<String> x,
            Map<String, String> mapTerms, String outputFile) {

        file.println("<html>");
        file.println("<head>");
        file.println("<title>" + "Glossary" + "</title>");
        file.println("</head>");
        file.println("<body>");
        file.println("<h2>Glossary</h2>" + "\n");
        file.println("<h3>Index</h3>");
        file.println("<ul>");
        // Printing out the terms on the home page
        while (x.length() > 0) {
            String word = x.remove(0);
            TermsandDefPage(word, file, mapTerms, outputFile);
            file.println(
                    "<li><a href=\"" + word + ".html\">" + word + "</a></li>");
        }
        file.println("</ul>");
        file.println("</body>");
        file.println("</html>");

        file.close();

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        // The program shall ask the user for the name of the input file
        // and for the name of a folder where all the output files will be saved.
        // The output folder must already exist and will not be created by the program.
        // The top-level index shall be named index.html
        // and the page for each term shall be named term.html where term is the actual term."
        out.print("Enter a file name: ");
        String fileName = in.nextLine();
        SimpleReader inputFile = new SimpleReader1L(fileName);
        out.print("Enter folder Name: ");
        String outputFile = in.nextLine();
        SimpleWriter output = new SimpleWriter1L(outputFile + "/index.html");

        Map<String, String> mapTerms = new Map1L<>();
        Queue<String> terms = new Queue1L<>();
        TermandDef(inputFile, mapTerms, terms);

        Sequence<String> termsList = new Sequence1L<>();
        String[] termArray = new String[terms.length()];
        int i = 0;
        Alphabeticalorder(terms);
        while (0 < terms.length()) {
            String nextTerm = terms.dequeue();
            termsList.add(termsList.length(), nextTerm);
            termArray[i] = nextTerm;
            i++;

        }
        outputIndex(output, termsList, mapTerms, outputFile);
        inputFile.close();
        in.close();
        out.close();
    }
}
